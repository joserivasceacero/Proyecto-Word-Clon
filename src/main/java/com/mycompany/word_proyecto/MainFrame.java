/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.word_proyecto;

import com.formdev.flatlaf.FlatDarculaLaf;
import com.formdev.flatlaf.*;
import com.formdev.flatlaf.themes.FlatMacDarkLaf;
import com.formdev.flatlaf.themes.FlatMacLightLaf;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author josey
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    private boolean isBoldActive = false;
    private boolean isItalicActive = false;
    private boolean isUnderlineActive = false;
    private int currentFontSize = 12;
    private Color color = null;
    private String fuenteSeleccionada = "Arial";

    public MainFrame() {
        initComponents();
        setKeybindings();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        jCombo_Archivo = new javax.swing.JComboBox<>();
        jCombo_fuente = new javax.swing.JComboBox<>();
        jSpinner_tamaño = new javax.swing.JSpinner();
        jButton_negrita = new javax.swing.JButton();
        jButton_italic = new javax.swing.JButton();
        jButton_subrayado = new javax.swing.JButton();
        jCombo_color = new javax.swing.JComboBox<>();
        jButton_ayuda = new javax.swing.JButton();
        Autor = new javax.swing.JButton();
        jToggle_temas = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Word de Jose");

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jPanel1.setMinimumSize(new java.awt.Dimension(777, 600));
        jPanel1.setPreferredSize(new java.awt.Dimension(777, 600));
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jTextPane.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextPaneKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTextPane);

        jPanel1.add(jScrollPane1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 2, 0, 2));
        jPanel2.setMinimumSize(new java.awt.Dimension(777, 33));
        jPanel2.setPreferredSize(new java.awt.Dimension(777, 33));
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING));

        jCombo_Archivo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Archivo", "Nuevo", "Guardar", "Salir" }));
        jCombo_Archivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCombo_ArchivoActionPerformed(evt);
            }
        });
        jPanel2.add(jCombo_Archivo);

        jCombo_fuente.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jCombo_fuente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Arial", "Calibri", "Consolas", "Impact", "Monospaced", "Roboto", "Times New Roman", "Verdana", "Yu Gothic" }));
        jCombo_fuente.setToolTipText("Tipo de letra");
        jCombo_fuente.setName(""); // NOI18N
        jCombo_fuente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCombo_fuenteActionPerformed(evt);
            }
        });
        jPanel2.add(jCombo_fuente);

        jSpinner_tamaño.setModel(new javax.swing.SpinnerNumberModel(12, 0, 100, 2));
        jSpinner_tamaño.setName(""); // NOI18N
        jSpinner_tamaño.setOpaque(true);
        jSpinner_tamaño.setPreferredSize(new java.awt.Dimension(80, 22));
        jSpinner_tamaño.setValue(12);
        jSpinner_tamaño.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner_tamañoStateChanged(evt);
            }
        });
        jPanel2.add(jSpinner_tamaño);

        jButton_negrita.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jButton_negrita.setText("N");
        jButton_negrita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_negritaActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_negrita);

        jButton_italic.setFont(new java.awt.Font("Verdana", 2, 12)); // NOI18N
        jButton_italic.setText("I");
        jButton_italic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_italicActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_italic);

        jButton_subrayado.setText("U");
        jButton_subrayado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_subrayadoActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_subrayado);

        jCombo_color.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Color", "Default", "Azul", "Rojo", "Elegir" }));
        jCombo_color.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCombo_colorActionPerformed(evt);
            }
        });
        jPanel2.add(jCombo_color);

        jButton_ayuda.setText("Ayuda");
        jButton_ayuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ayudaActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_ayuda);

        Autor.setText("Autor");
        Autor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutorActionPerformed(evt);
            }
        });
        jPanel2.add(Autor);

        jToggle_temas.setText("Claro");
        jToggle_temas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggle_temasActionPerformed(evt);
            }
        });
        jPanel2.add(jToggle_temas);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_negritaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_negritaActionPerformed
        // TODO add your handling code here:
        ActivarNegrita();
    }//GEN-LAST:event_jButton_negritaActionPerformed

    private void jButton_italicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_italicActionPerformed
        // TODO add your handling code here:
        ActivarCursiva();
    }//GEN-LAST:event_jButton_italicActionPerformed

    private void jButton_subrayadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_subrayadoActionPerformed
        // TODO add your handling code here:
        activarSubrayado();
    }//GEN-LAST:event_jButton_subrayadoActionPerformed

    private void jSpinner_tamañoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner_tamañoStateChanged
        // TODO add your handling code here:
        cambiarTamañoLetra();
    }//GEN-LAST:event_jSpinner_tamañoStateChanged

    private void jCombo_ArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCombo_ArchivoActionPerformed
        // TODO add your handling code here:
        String selectedOption = (String) jCombo_Archivo.getSelectedItem();

        switch (selectedOption) {
            case "Nuevo":
                nuevoArchivo();
                break;
            case "Guardar":
                guardarContenido();
                break;
            case "Salir":
                exitProgram();
                break;
            default:
                break;
        }
        jCombo_Archivo.setSelectedIndex(0);
    }//GEN-LAST:event_jCombo_ArchivoActionPerformed

    private void jCombo_colorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCombo_colorActionPerformed
        // TODO add your handling code here:
        String colorSeleccionado = (String) jCombo_color.getSelectedItem();
        switch (colorSeleccionado) {
            case "Default":
                color = null;
                break;
            case "Azul":
                color = Color.BLUE;
                break;
            case "Rojo":
                color = Color.RED;
                break;
            case "Elegir":
                color = JColorChooser.showDialog(this, "Elige un color", Color.BLACK);
                break;
            default:
                break;
        }
        if (color != null) {
        int start = jTextPane.getSelectionStart();
        int end = jTextPane.getSelectionEnd();
        StyledDocument doc = jTextPane.getStyledDocument();

        if (start != end) { 
            SimpleAttributeSet attrs = new SimpleAttributeSet();
            StyleConstants.setForeground(attrs, color); 
            doc.setCharacterAttributes(start, end - start, attrs, false);
        } else { 
            aplicarEstilos();
        }
        }

        jCombo_color.setSelectedIndex(0);
    }//GEN-LAST:event_jCombo_colorActionPerformed

    private void AutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutorActionPerformed
        // TODO add your handling code here:
        mostrarAutor();
    }//GEN-LAST:event_AutorActionPerformed

    private void jButton_ayudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ayudaActionPerformed
        // TODO add your handling code here:
        mostrarAyuda();
    }//GEN-LAST:event_jButton_ayudaActionPerformed

    private void jCombo_fuenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCombo_fuenteActionPerformed
        // TODO add your handling code here:
        fuenteSeleccionada = (String) jCombo_fuente.getSelectedItem();
        int start = jTextPane.getSelectionStart();
        int end = jTextPane.getSelectionEnd();
        StyledDocument doc = jTextPane.getStyledDocument();

        if (start != end) { 
            SimpleAttributeSet attrs = new SimpleAttributeSet();
            StyleConstants.setFontFamily(attrs, fuenteSeleccionada); 
            doc.setCharacterAttributes(start, end - start, attrs, false);
        } else { 
            aplicarEstilos();
        }
    }//GEN-LAST:event_jCombo_fuenteActionPerformed

    private void jTextPaneKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextPaneKeyPressed
        // TODO add your handling code here:
        aplicarEstilos();
    }//GEN-LAST:event_jTextPaneKeyPressed

    private void jToggle_temasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggle_temasActionPerformed
        // TODO add your handling code here:
        if(!jToggle_temas.isSelected()){
         jToggle_temas.setText("Claro");
            try {
                UIManager.setLookAndFeel(new FlatMacDarkLaf());
            } catch (UnsupportedLookAndFeelException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
         jToggle_temas.setText("Oscuro");
            try {
                UIManager.setLookAndFeel(new FlatMacLightLaf());
            } catch (UnsupportedLookAndFeelException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
          SwingUtilities.updateComponentTreeUI(this);
    }//GEN-LAST:event_jToggle_temasActionPerformed

    /**
     * @param args the command line arguments
     */
    private void setKeybindings() {
        InputMap inputMap = jTextPane.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ActionMap actionMap = jTextPane.getActionMap();

        inputMap.put(KeyStroke.getKeyStroke("control B"), "negrita");
        actionMap.put("negrita", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ActivarNegrita();
            }
        });

        inputMap.put(KeyStroke.getKeyStroke("control I"), "cursiva");
        actionMap.put("cursiva", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ActivarCursiva();
            }
        });

        inputMap.put(KeyStroke.getKeyStroke("control U"), "subrayado");
        actionMap.put("subrayado", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                activarSubrayado();
            }
        });

        inputMap.put(KeyStroke.getKeyStroke("control S"), "guardar");
        actionMap.put("guardar", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                guardarContenido();
            }
        });

        inputMap.put(KeyStroke.getKeyStroke("control N"), "nuevo");
        actionMap.put("nuevo", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                nuevoArchivo();
            }
        });

        inputMap.put(KeyStroke.getKeyStroke("F1"), "ayuda");
        actionMap.put("ayuda", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                mostrarAyuda();
            }
        });
    }

    private void ActivarNegrita() {
        int start = jTextPane.getSelectionStart();
        int end = jTextPane.getSelectionEnd();
        StyledDocument doc = jTextPane.getStyledDocument();

        if (start != end) {

            SimpleAttributeSet selectedAttrs = new SimpleAttributeSet(doc.getCharacterElement(start).getAttributes());
            boolean isCurrentlyBold = StyleConstants.isBold(selectedAttrs);

            SimpleAttributeSet attrs = new SimpleAttributeSet();
            StyleConstants.setBold(attrs, !isCurrentlyBold); 
            doc.setCharacterAttributes(start, end - start, attrs, false);
        } else {
            isBoldActive = !isBoldActive;

        }
    }

    private void ActivarCursiva() {
        int start = jTextPane.getSelectionStart();
        int end = jTextPane.getSelectionEnd();
        StyledDocument doc = jTextPane.getStyledDocument();

        if (start != end) {
            SimpleAttributeSet selectedAttrs = new SimpleAttributeSet(doc.getCharacterElement(start).getAttributes());
            boolean isCurrentlyItalic = StyleConstants.isItalic(selectedAttrs);

            SimpleAttributeSet attrs = new SimpleAttributeSet();
            StyleConstants.setItalic(attrs, !isCurrentlyItalic); 
            doc.setCharacterAttributes(start, end - start, attrs, false);
        } else {
            isItalicActive = !isItalicActive;

        }
    }

    private void activarSubrayado() {
        int start = jTextPane.getSelectionStart();
        int end = jTextPane.getSelectionEnd();
        StyledDocument doc = jTextPane.getStyledDocument();

        if (start != end) {
            SimpleAttributeSet selectedAttrs = new SimpleAttributeSet(doc.getCharacterElement(start).getAttributes());
            boolean isCurrentlyUnderline = StyleConstants.isUnderline(selectedAttrs);

            SimpleAttributeSet attrs = new SimpleAttributeSet();
            StyleConstants.setUnderline(attrs, !isCurrentlyUnderline); 
            doc.setCharacterAttributes(start, end - start, attrs, false);
        } else {
            isUnderlineActive = !isUnderlineActive;

        }
    }


    private void cambiarTamañoLetra() {
        int start = jTextPane.getSelectionStart();
        int end = jTextPane.getSelectionEnd();
        StyledDocument doc = jTextPane.getStyledDocument();

        if (start != end) { 
            SimpleAttributeSet attrs = new SimpleAttributeSet();
            int newFontSize = (int) jSpinner_tamaño.getValue();
            StyleConstants.setFontSize(attrs, newFontSize); 
            doc.setCharacterAttributes(start, end - start, attrs, false);
        } else { 
            currentFontSize = (int) jSpinner_tamaño.getValue();
            aplicarEstilos();
        }
    }

    private void nuevoArchivo() {
        StyledDocument doc = jTextPane.getStyledDocument();

     
        try {
            doc.remove(0, doc.getLength()); 
        } catch (BadLocationException e) {
            e.printStackTrace();
        }

      
        isBoldActive = false;
        isItalicActive = false;
        isUnderlineActive = false;
        currentFontSize = 12;
        color = null;
        fuenteSeleccionada = "Arial";

        aplicarEstilos();
        jSpinner_tamaño.setValue(12);
        jCombo_fuente.setSelectedIndex(0);
    }


    private void guardarContenido() {
        String content = jTextPane.getText();

        if (content.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El documento está vacío.", "Guardar", JOptionPane.WARNING_MESSAGE);
            return;
        }
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar documento");

        // Abrir el cuadro de diálogo de guardado y verificar la elección del usuario
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave))) {
                writer.write(content);
                JOptionPane.showMessageDialog(this, "Documento guardado con éxito en: " + fileToSave.getAbsolutePath(), "Guardar", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al guardar el documento.", "Guardar", JOptionPane.ERROR_MESSAGE);
            }
        }
    }



    private void exitProgram() {
        System.exit(0);
    }

    private void mostrarAutor() {
        JOptionPane.showMessageDialog(this, """
    <html>
        <b>Autor:</b> Jose Rivas Ceacero<br>
        Proyecto de Word 2.0<br>
        Gracias por utilizar mi software<br>
    </html>
    """, "Autor", JOptionPane.INFORMATION_MESSAGE);
    }

    private void aplicarEstilos() {
        StyledDocument doc = jTextPane.getStyledDocument();
        SimpleAttributeSet attrs = new SimpleAttributeSet();

        StyleConstants.setBold(attrs, isBoldActive);
        StyleConstants.setItalic(attrs, isItalicActive);
        StyleConstants.setUnderline(attrs, isUnderlineActive);
        StyleConstants.setFontSize(attrs, currentFontSize);
        StyleConstants.setFontFamily(attrs, fuenteSeleccionada);
        StyleConstants.setForeground(attrs, color);

        int start = jTextPane.getSelectionStart();
        int end = jTextPane.getSelectionEnd();

        if (start != end) {
            doc.setCharacterAttributes(start, end - start, attrs, false);
        } else {
            jTextPane.setCharacterAttributes(attrs, true);
        }
    }

    private void mostrarAyuda() {
        String mensajeAyuda = """
        <html>
        Atajos de Teclado:<br><br>
        - <b>Negrita</b>: Ctrl + B<br>
        - <b>Cursiva</b>: Ctrl + I<br>
        - <b>Subrayado</b>: Ctrl + U<br>
        - <b>Nuevo Documento</b>: Ctrl + N<br>
        - <b>Guardar Documento</b>: Ctrl + S<br>
        - <b>Ayuda</b>: F1<br>
        </html>
        """;


        JOptionPane.showMessageDialog(this, mensajeAyuda, "Ayuda - Atajos de Teclado", JOptionPane.INFORMATION_MESSAGE);
    }

    public static void main(String args[]) {
       try {

            UIManager.setLookAndFeel(new FlatMacDarkLaf());

        } catch (Exception ex) {
            System.err.println("Error al cargar el tema de FlatLaf.");
        }


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Autor;
    private javax.swing.JButton jButton_ayuda;
    private javax.swing.JButton jButton_italic;
    private javax.swing.JButton jButton_negrita;
    private javax.swing.JButton jButton_subrayado;
    private javax.swing.JComboBox<String> jCombo_Archivo;
    private javax.swing.JComboBox<String> jCombo_color;
    private javax.swing.JComboBox<String> jCombo_fuente;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner_tamaño;
    private javax.swing.JTextPane jTextPane;
    private static javax.swing.JToggleButton jToggle_temas;
    // End of variables declaration//GEN-END:variables
}
